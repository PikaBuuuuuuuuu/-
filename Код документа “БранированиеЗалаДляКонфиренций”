//КОД ДЛЯ КАРБОТЫ ПЛАНИРОВЩИКА, РАЗРАБОТАННОГО  с 2.07.2024 по 5.07.2024
//НАЧАЛА РАЗРАБОТКИ 2.07.2024


//передача инфы то что изменина запись документа
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Изменить_Запись"); 
КонецПроцедуры 



// передача выбранного цвета юзером в бд, ЗАПРЕТ НА НАЛЕЗАНИЕ ЭЛЕМЕНТОВ ДРУГ НА ДРУГА.
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) 
	
	
	//Если Объект.Длительность = 0 Тогда  
	//	
	//	Сообщить("Нельзя занимать меньше 30 минут");
	//	Сообщить("Ошибка бронирования: длительность записи занимает 0 минут");
	//	Отказ = Истина;
	//	
	//КонецЕсли;
	
	
	
	ТекущийОбъект.ДатаОкончания = ТекущийОбъект.Дата + ТекущийОбъект.Длительность*60;   
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БронированиеЗалаДляКонференций.Дата КАК Дата,
	|	БронированиеЗалаДляКонференций.ДатаОкончания КАК ДатаОкончания,
	|	БронированиеЗалаДляКонференций.Зал КАК Зал,
	|	БронированиеЗалаДляКонференций.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.БронированиеЗалаДляКонференций КАК БронированиеЗалаДляКонференций
	|ГДЕ
	|	БронированиеЗалаДляКонференций.ПометкаУдаления = Ложь
	|	ИЛИ БронированиеЗалаДляКонференций.Проведен = Истина";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Проверка на совпадение зала
		Если ТекущийОбъект.Зал = Выборка.Зал Тогда
			// Проверка на другую запись
			Если ТекущийОбъект.Ссылка <> Выборка.Ссылка Тогда
				// Проверка на бронирование в рамках другой записи (внутреннее)
				Если (ТекущийОбъект.Дата > Выборка.Дата И ТекущийОбъект.ДатаОкончания < Выборка.Дата) Тогда
					Отказ = Истина;      
			        Прервать;
					
				// Проверка попадание окончания бронирования в рамки следующей записи
				ИначеЕсли (ТекущийОбъект.ДатаОкончания > Выборка.Дата И ТекущийОбъект.ДатаОкончания < Выборка.ДатаОкончания) Тогда
				    Отказ = Истина;      
			        Прервать;
					
				// Проверка на бронирование в рамках другой записи (внешнее) 
				ИначеЕсли (ТекущийОбъект.Дата < Выборка.Дата И ТекущийОбъект.ДатаОкончания > Выборка.Дата) Тогда
					Отказ = Истина;      
			        Прервать;
					
				// Проверка попадание начала бронирования в рамках предыдущей записи	
				ИначеЕсли ТекущийОбъект.Дата < Выборка.ДатаОкончания И ТекущийОбъект.ДатаОкончания > Выборка.ДатаОкончания  Тогда
					Отказ = Истина;      
			        Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Если Отказ Тогда
		Сообщить("Ошибка бронирования: Выбранное время занято");
	КонецЕсли;
	
	ТекущийОбъект.Цвет = Новый ХранилищеЗначения(Цвет); 
	
КонецПроцедуры



//Подтягивание из БД цвета документа
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	
	Цвет = ТекущийОбъект.Цвет.Получить();
КонецПроцедуры

//Не возможность фиксить чужие брони, автоподстановка значений в ОТДЕЛ и БРОНИРУЮЩИЕ ЛИЦО, при пустых записях Длительность. 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗначениеТекущегоПользователя = ПараметрыСеанса.ТекущийПользователь;
	//ПраваТекущегоПользователя = ПараметрыСеанса.ТекущийПользователь().Роли;
	УникальныйИдентификаторПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	|	Пользователи.Подразделение КАК Подразделение
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл    
		
		Если ВыборкаДетальныеЗаписи.ИдентификаторПользователяИБ = УникальныйИдентификаторПользователя ТОГДА 
			
			Подразделение = ВыборкаДетальныеЗаписи.Подразделение;
			
			прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Объект.БронирующиеЛицо) Тогда 
		Объект.БронирующиеЛицо = ЗначениеТекущегоПользователя;
		Если НЕ ЗначениеЗаполнено(Объект.Отдел) Тогда
			Объект.Отдел = Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Если (Объект.БронирующиеЛицо <> ЗначениеТекущегоПользователя)
		//ИЛИ Объект.Отдел <> Подразделение)
		//И  ПраваТекущегоПользователя <> Роли.Администратор 
		Тогда
		Элементы.Удалить.Доступность = ЛОЖЬ;
		ТолькоПросмотр = Истина;  
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)  
	//Что бы в своих записях не ставили других людей
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи",РежимЗаписиДокумента.ОтменаПроведения);
	//ЭтотОбъект.Записать(ПараметрыЗаписи);
	
	Объект.ПометкаУдаления = ИСТИНА;
	Записать(ПараметрыЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ Объект.БронирующиеЛицо = ПользователиКлиент.АвторизованныйПользователь() Тогда
		Отказ = ИСТИНА;
		Сообщить("Ошибка бронирования: указано другое бронирующее лицо");
	КонецЕсли;
КонецПроцедуры

//КОНЕЦ РАЗРАБОТКИ 11.07.2024
